# -*- coding: utf-8 -*-
"""Symptom_Medicare.

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17tIPEltncCHXfpquNaXNSXuZMaAQcK6P
"""

import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# %% [markdown]
# Your data and functions should go here
# Define the dataset
data = {
    'Disease': ['Malaria', 'Malaria', 'Malaria',
                'Typhoid', 'Typhoid', 'Typhoid',
                'HIV/AIDS', 'HIV/AIDS', 'HIV/AIDS'],
    'Fever': ['High', 'Medium', 'High',
              'High', 'High', 'Medium',
              'Medium', 'Low', 'Low'],
    'Fatigue': ['Very High', 'High', 'High',
                'High', 'Medium', 'Low',
                'Very High', 'High', 'High'],
    'Headache': ['High', 'Medium', 'High',
                 'Very High (Heaviness)', 'High', 'Medium',
                 'Low', 'Medium', 'Medium'],
    'Vomiting': ['Yes', 'Yes', 'Yes',
                 'Yes', 'Yes', 'No',
                 'Yes', 'Yes', 'Yes'],
    'Skin Rash': ['Mild', 'Mild', 'None',
                  'Rose spots', 'Mild', 'None',
                  'High', 'High', 'Medium'],
    'Muscle Joint Pain': ['Yes', 'No', 'Medium',
                   'No', 'Yes', 'Medium',
                   'Yes', 'Yes', 'Yes'],
    'Weight Loss': ['Moderate', 'Mild', 'Severe',
                    'Mild', 'Mild', 'Moderate',
                    'Severe', 'Severe', 'Severe'],
    'Diarrhea': ['No', 'Yes', 'No',
                 'Yes', 'No', 'Yes',
                 'Yes', 'Yes', 'Yes'],
    'Night Sweats': ['Yes', 'Yes', 'No',
                 'No', 'No', 'No',
                 'Yes', 'Yes', 'Yes'],
    'Lymph Node Swelling': ['No', 'No', 'No',
                 'No', 'No', 'No',
                 'Yes', 'Yes', 'High']


}

df = pd.DataFrame(data)

# Symptom input options by mapping the unique option
symptom_option_mapping  = {
    'Fever': {'a': 'High', 'b': 'Low', 'c': 'Medium'},
    'Fatigue': {'a': 'High', 'b': 'Low', 'c': 'Medium', 'd': 'Very High'},
    'Headache': {'a': 'High', 'b': 'Low', 'c': 'Medium', 'd': 'Very High (Heaviness)'},
    'Vomiting': {'a': 'Yes', 'b': 'No'},
    'Skin Rash': {'a': 'Mild', 'b': 'None', 'c': 'High'},
    'Muscle Joint Pain': {'a': 'Yes', 'b': 'No', 'c': 'Medium'},
    'Weight Loss': {'a': 'Mild', 'b': 'Moderate', 'c': 'Severe'},
    'Diarrhea': {'a': 'Yes', 'b': 'No'},
    'Night Sweats': {'a': 'Yes', 'b': 'No'},
    'Lymph Node Swelling': {'a': 'No', 'b': 'Yes', 'c': 'High'}
}

# Use Naive Bayes prediction
def predict_disease(df, user_symptoms):
    disease_probs = {}
    total_count = len(df)
    diseases = df['Disease'].unique()

    for disease in diseases:
        sub_df = df[df['Disease'] == disease]
        prior = len(sub_df) / total_count
        likelihood = 1.0

        for symptom, value in user_symptoms.items():
            match_count = len(sub_df[sub_df[symptom] == value])
            symptom_prob = (match_count + 1) / (len(sub_df) + len(df[symptom].unique())) if len(sub_df) else 0.0
            likelihood *= symptom_prob

        disease_probs[disease] = prior * likelihood

    total_prob = sum(disease_probs.values())

    if total_prob == 0:
        return "No Match Found", {}
    else:
        for disease in disease_probs:
            disease_probs[disease] = (disease_probs[disease] / total_prob) * 100

        predicted = max(disease_probs, key=disease_probs.get)
        return predicted, disease_probs

# Plot the probabilities for visual display of the disease
def plot_advanced_distribution(probabilities, plotting_style):
    # Apply selected plotting style
    if plotting_style == "Seaborn Darkgrid":
        sns.set(style="darkgrid")
    elif plotting_style == "Matplotlib Classic":
        plt.style.use('classic')
    else:
        sns.set(style="whitegrid") # Default style

    diseases = list(probabilities.keys())
    values = list(probabilities.values())
    colors = sns.color_palette("coolwarm", len(diseases))

    fig, ax = plt.subplots(figsize=(10, 6))
    bars = sns.barplot(x=diseases, y=values, palette=colors, ax=ax, hue=diseases, legend=False)

    ax.set_title("Symptom Medicare Disease Prediction", fontsize=16, fontweight='bold')
    ax.set_xlabel("Disease", fontsize=12)
    ax.set_ylabel("Probability (%)", fontsize=12)
    ax.set_ylim(0, 100)

    for bar in bars.patches:
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + 2,
                f'{height:.1f}%', ha='center', fontsize=11, fontweight='semibold')

    # Reset style after plotting to avoid affecting other potential plots
    if plotting_style != "Default":
        plt.style.use('default')

    return fig # Return the figure object


# Streamlit App Layout
st.title("Symptom Medicare Disease Predictor")
st.write("Please provide your information and select the symptoms you are experiencing.")

# Add a text input for the user's name
user_name = st.text_input("Enter your Name")

# Add the "Manage Selectbox" for plotting style
plotting_style_options = ["Default", "Seaborn Darkgrid", "Matplotlib Classic"]
selected_plotting_style = st.selectbox("Select Plotting Style", plotting_style_options)


user_symptoms = {}
# Create select boxes for each symptom
for symptom, options in symptom_option_mapping.items():
    # Get the list of values for the selectbox
    option_values = list(options.values())
    # Use a unique key for each selectbox in the loop [1]
    selected_value = st.selectbox(f"Select {symptom}", option_values, key=f"symptom_{symptom}")
    # Store the selected value in the user_symptoms dictionary
    user_symptoms[symptom] = selected_value

if st.button("Predict Disease"):
    prediction, probs = predict_disease(df, user_symptoms)

    # Display a personalized message if a name was entered
    if user_name:
        st.write(f"Hello, {user_name}!")

    if prediction == "No Match Found":
        st.write("No potential disease matches found for the given symptoms in the training data.")
    else:
        st.write(f"\nBased on your symptoms, the most likely disease is: **{prediction}**")
        if probs:
            # Pass the selected plotting style to the plotting function
            fig = plot_advanced_distribution(probs, selected_plotting_style)
            st.pyplot(fig)
        
